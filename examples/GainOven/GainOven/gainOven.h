// Autogenerated with StateSmith
#pragma once
#include <stdint.h>

enum gainOven_EventId
{
    gainOven_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    gainOven_EventId_BUTTON_ON_OFF_PRESS = 1,
    gainOven_EventId_BUTTON_START_PAUSE_PRESS = 2,
    gainOven_EventId_BUTTON_STOP_PRESSED = 3,
    gainOven_EventId_COOKING_COMPLETE = 4,
    gainOven_EventId_DOOR_CLOSE = 5,
    gainOven_EventId_DOOR_OPEN = 6,
    gainOven_EventId_IMMEDIATE_ACTION = 7,
    gainOven_EventId_INSPECTION_OFF_COMMAND = 8,
    gainOven_EventId_INSPECTION_ON_COMMAND = 9,
    gainOven_EventId_SELF_TEST_FAIL = 10,
    gainOven_EventId_SELF_TEST_PASS = 11,
    gainOven_EventId_SELF_TEST_REQUIRE = 12,
    gainOven_EventId_TIME_UP = 13,
};

enum
{
    gainOven_EventIdCount = 14
};

enum gainOven_StateId
{
    gainOven_StateId_ROOT = 0,
    gainOven_StateId_COOKING = 1,
    gainOven_StateId_COOLDOWN = 2,
    gainOven_StateId_DOOROPEN = 3,
    gainOven_StateId_HEATING = 4,
    gainOven_StateId_PAUSE = 5,
    gainOven_StateId_READY = 6,
    gainOven_StateId_FAILURE = 7,
    gainOven_StateId_IMMEDIATE = 8,
    gainOven_StateId_INSPECTION = 9,
    gainOven_StateId_SELFTEST = 10,
    gainOven_StateId_STANDBY_OFF = 11,
    gainOven_StateId_STANDBY_ON = 12,
};

enum
{
    gainOven_StateIdCount = 13
};

typedef struct gainOven gainOven;
typedef void (*gainOven_Func)(gainOven* sm);

struct gainOven
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum gainOven_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    gainOven_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    gainOven_Func current_event_handlers[gainOven_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    gainOven_Func current_state_exit_handler;
    
    // User variables. Can be used for inputs, outputs, user variables...
    struct
    {
        uint8_t doorSensor;
    } vars;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void gainOven_ctor(gainOven* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void gainOven_start(gainOven* self);

// Dispatches an event to the state machine. Not thread safe.
void gainOven_dispatch_event(gainOven* self, enum gainOven_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* gainOven_state_id_to_string(const enum gainOven_StateId id);

