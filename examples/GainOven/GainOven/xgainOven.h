// Autogenerated with StateSmith
#pragma once
            

enum gainOven_EventId
{
    gainOven_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    gainOven_EventId_TRANSITIONLEFT = 1,
    gainOven_EventId_TRANSITIONRIGHT = 2,
};

enum
{
    gainOven_EventIdCount = 3
};

enum gainOven_StateId
{
    gainOven_StateId_ROOT = 0,
    gainOven_StateId_STATE_1 = 1,
    gainOven_StateId_STATE_2 = 2,
};

enum
{
    gainOven_StateIdCount = 3
};

typedef struct gainOven gainOven;
typedef void (*gainOven_Func)(gainOven* sm);

struct gainOven
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    enum gainOven_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    gainOven_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    gainOven_Func current_event_handlers[gainOven_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    gainOven_Func current_state_exit_handler;
};

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void gainOven_ctor(gainOven* self);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void gainOven_start(gainOven* self);

// Dispatches an event to the state machine. Not thread safe.
void gainOven_dispatch_event(gainOven* self, enum gainOven_EventId event_id);

// Converts a state id to a string. Thread safe.
const char* gainOven_state_id_to_string(const enum gainOven_StateId id);

